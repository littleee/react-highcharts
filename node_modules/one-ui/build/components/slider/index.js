'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * To prevent text selection while dragging.
 * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag
 */
function pauseEvent(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  if (e.preventDefault) {
    e.preventDefault();
  }
  // e.cancelBubble = true;
  // e.returnValue = false;
  return false;
}

function stopPropagation(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  // e.cancelBubble = true;
}

var Slider = (_temp = _class = function (_Component) {
  _inherits(Slider, _Component);

  function Slider(props, context) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props, context));

    var value = _this.props.value || _this.props.defaultValue;

    _this.state = {
      index: -1,
      upperBound: 0,
      sliderLength: 0,
      value: value
    };

    _this._onSliderMouseDown = _this._onSliderMouseDown.bind(_this);
    _this._onMouseDown = _this._onMouseDown.bind(_this);
    _this._onMouseMove = _this._onMouseMove.bind(_this);
    _this._onMouseUp = _this._onMouseUp.bind(_this);
    _this._onTouchStart = _this._onTouchStart.bind(_this);
    _this._onTouchMove = _this._onTouchMove.bind(_this);
    _this._onTouchEnd = _this._onTouchEnd.bind(_this);
    _this._handleResize = _this._handleResize.bind(_this);
    return _this;
  }

  // Keep the internal `value` consistent with an outside `value` if present.
  // This basically allows the slider to be a controlled component.


  _createClass(Slider, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var value = newProps.value || this.state.value;

      this.setState({
        value: this._trimAlignValue(value, newProps)
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      (0, _jquery2.default)(window).on('resize', this._handleResize);

      this._handleResize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      (0, _jquery2.default)(window).off('resize', this._handleResize);
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: '_handleResize',
    value: function _handleResize() {
      var slider = this.refs.slider;
      var handle = this.refs.handle;
      var rect = slider.getBoundingClientRect();

      var size = 'clientWidth';

      var sliderMax = rect['right'];
      var sliderMin = rect['left'];

      this.setState({
        upperBound: slider[size] - handle[size],
        sliderLength: Math.abs(sliderMax - sliderMin),
        handleSize: handle[size],
        sliderStart: this.props.invert ? sliderMax : sliderMin
      });
    }

    // Snaps the nearest handle to the value corresponding to `position` and calls `callback` with that handle's index.

  }, {
    key: '_forceValueFromPosition',
    value: function _forceValueFromPosition(position, callback) {
      var pixelOffset = position - this.state.sliderStart;
      if (this.props.invert) {
        pixelOffset = this.state.sliderLength - pixelOffset;
      }
      pixelOffset -= this.state.handleSize / 2;

      var nextValue = this._trimAlignValue(pixelOffset / this.state.upperBound * (this.props.max - this.props.min) + this.props.min);
      var value = this.state.value;
      value = nextValue;

      this.setState({ value: value }, callback.bind(this));
    }
  }, {
    key: '_getMousePosition',
    value: function _getMousePosition(e) {
      return [e['pageX'], e['pageY']];
    }
  }, {
    key: '_getTouchPosition',
    value: function _getTouchPosition(e) {
      var touch = e.touches[0];
      return [touch['pageX'], touch['pageY']];
    }
  }, {
    key: '_getMouseEventMap',
    value: function _getMouseEventMap() {
      return {
        'mousemove': this._onMouseMove,
        'mouseup': this._onMouseUp
      };
    }
  }, {
    key: '_getTouchEventMap',
    value: function _getTouchEventMap() {
      return {
        'touchmove': this._onTouchMove,
        'touchend': this._onTouchEnd
      };
    }

    // create the `mousedown` handler for the i-th handle

  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      if (this.props.disabled) {
        return;
      }
      var position = this._getMousePosition(e);
      this._start(position[0]);
      this._addHandlers(this._getMouseEventMap());

      pauseEvent(e);
    }

    // create the `touchstart` handler for the i-th handle

  }, {
    key: '_onTouchStart',
    value: function _onTouchStart(e) {
      if (this.props.disabled || e.touches.length > 1) {
        return;
      }
      var position = this._getTouchPosition(e);
      this.startPosition = position;
      this.isScrolling = undefined; // don't know yet if the user is trying to scroll
      this._start(position[0]);
      this._addHandlers(this._getTouchEventMap());

      stopPropagation(e);
    }
  }, {
    key: '_addHandlers',
    value: function _addHandlers(eventMap) {
      Object.keys(eventMap).forEach(function (key) {
        (0, _jquery2.default)(document).on(key, eventMap[key]);
      });
    }
  }, {
    key: '_removeHandlers',
    value: function _removeHandlers(eventMap) {
      Object.keys(eventMap).forEach(function (key) {
        (0, _jquery2.default)(document).off(key, eventMap[key]);
      });
    }
  }, {
    key: '_start',
    value: function _start(position) {
      if (document.activeElement) {
        document.activeElement.blur();
      }

      this._fireEvent('onBeforeChange');

      this.setState({
        startValue: this.state.value,
        startPosition: position,
        zIndices: 1
      });
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp() {
      this._onEnd(this._getMouseEventMap());
    }
  }, {
    key: '_onTouchEnd',
    value: function _onTouchEnd() {
      this._onEnd(this._getTouchEventMap());
    }
  }, {
    key: '_onEnd',
    value: function _onEnd(eventMap) {
      this._removeHandlers(eventMap);
      this.setState({ index: -1 }, this._fireEvent.bind(this, 'onAfterChange'));
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(e) {
      var position = this._getMousePosition(e);
      this._move(position[0]);
    }
  }, {
    key: '_onTouchMove',
    value: function _onTouchMove(e) {
      if (e.touches.length > 1) {
        return;
      }

      var position = this._getTouchPosition(e);

      if (typeof this.isScrolling === 'undefined') {
        var diffMainDir = position[0] - this.startPosition[0];
        var diffScrollDir = position[1] - this.startPosition[1];
        this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);
      }

      if (this.isScrolling) {
        this.setState({ index: -1 });
        return;
      }

      pauseEvent(e);

      this._move(position[0]);
    }
  }, {
    key: '_move',
    value: function _move(position) {
      var props = this.props;
      var state = this.state;

      var value = state.value;
      var l = value;
      var oldValue = value;

      var diffPosition = position - state.startPosition;

      var diffValue = diffPosition / (state.sliderLength - state.handleSize) * (props.max - props.min);
      var newValue = this._trimAlignValue(state.startValue + diffValue);

      var minDistance = props.minDistance;

      value = newValue;

      // Normally you would use `shouldComponentUpdate`, but since the slider is a low-level component,
      // the extra complexity might be worth the extra performance.
      if (newValue !== oldValue) {
        this.setState({ value: value }, this._fireEvent.bind(this, 'onChange'));
      }
    }
  }, {
    key: '_trimAlignValue',
    value: function _trimAlignValue(val) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;

      var value;

      if (val <= props.minValue) {
        value = props.minValue;
      } else if (val >= props.maxValue) {
        value = props.maxValue;
      } else {
        value = val;
      }

      var valModStep = (value - props.min) % props.step;
      var alignValue = value - valModStep;

      if (Math.abs(valModStep) * 2 >= props.step) {
        alignValue += valModStep > 0 ? props.step : -props.step;
      }

      return parseFloat(alignValue.toFixed(5));
    }
  }, {
    key: '_onSliderMouseDown',
    value: function _onSliderMouseDown(e) {
      if (this.props.disabled || this.props.snapDragDisabled) {
        return;
      }
      var position = this._getMousePosition(e);
      this._forceValueFromPosition(position[0], function (i) {
        this._fireEvent('onChange');
        this._start(position[0]);
        this._addHandlers(this._getMouseEventMap());
      }.bind(this));

      pauseEvent(e);
    }
  }, {
    key: '_fireEvent',
    value: function _fireEvent(evName) {
      if (this.props[evName]) {
        this.props[evName](this.state.value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var style = {
        position: 'absolute',
        willChange: 'left',
        zIndex: 1,
        left: (this.state.value - this.props.min) / (this.props.max - this.props.min) * this.state.upperBound + 'px'
      };

      var selectionStyle = {
        width: (this.state.value - this.props.min) / (this.props.max - this.props.min) * this.state.upperBound + 'px'
      };

      return _react2.default.createElement(
        'div',
        {
          ref: 'slider',
          className: 'slider time-slider' + (this.props.disabled ? ' disabled' : '')
        },
        _react2.default.createElement(
          'div',
          {
            className: 'slider-track',
            onMouseDown: this._onSliderMouseDown
          },
          _react2.default.createElement('div', { className: 'slider-selection', style: selectionStyle }),
          _react2.default.createElement('div', _extends({
            ref: 'handle',
            key: 'handle',
            className: 'slider-handle', style: style,
            onMouseDown: this._onMouseDown
          }, this.props.tooltip, {
            onTouchStart: this._onTouchStart
          }))
        )
      );
    }
  }]);

  return Slider;
}(_react.Component), _class.defaultProps = {
  min: 0,
  minValue: 0,
  max: 100,
  maxValue: 100,
  value: 50,
  step: 1,
  minDistance: 0,
  defaultValue: 0,
  orientation: 'horizontal',
  className: 'slider',
  handleClassName: 'handle',
  handleActiveClassName: 'active',
  withBars: false,
  pearling: false,
  disabled: false,
  snapDragDisabled: false,
  invert: false,
  tooltip: null
}, _class.propTypes = {
  /**
   * The minimum value of the slider.
   */
  min: _propTypes2.default.number,

  /**
   * The maximum value of the slider.
   */
  max: _propTypes2.default.number,

  /**
   * Value to be added or subtracted on each step the slider makes.
   * Must be greater than zero.
   * `max - min` should be evenly divisible by the step value.
   */
  step: _propTypes2.default.number,

  /**
   * The minimal distance between any pair of handles.
   * Must be positive, but zero means they can sit on top of each other.
   */
  minDistance: _propTypes2.default.number,

  /**
   * Determines the initial positions of the handles and the number of handles if the component has no children.
   *
   * If a number is passed a slider with one handle will be rendered.
   * If an array is passed each value will determine the position of one handle.
   * The values in the array must be sorted.
   * If the component has children, the length of the array must match the number of children.
   */
  defaultValue: _propTypes2.default.number,

  /**
   * Like `defaultValue` but for [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).
   */
  value: _propTypes2.default.number,

  /**
   * Determines whether the slider moves horizontally (from left to right) or vertically (from top to bottom).
   */
  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),

  /**
   * The css class set on the slider node.
   */
  className: _propTypes2.default.string,

  /**
   * The css class set on each handle node.
   *
   * In addition each handle will receive a numbered css class of the form `${handleClassName}-${i}`,
   * e.g. `handle-0`, `handle-1`, ...
   */
  handleClassName: _propTypes2.default.string,

  /**
   * The css class set on the handle that is currently being moved.
   */
  handleActiveClassName: _propTypes2.default.string,

  /**
   * If `true` the active handle will push other handles
   * within the constraints of `min`, `max`, `step` and `minDistance`.
   */
  pearling: _propTypes2.default.bool,

  /**
   * If `true` the handles can't be moved.
   */
  disabled: _propTypes2.default.bool,

  /**
   * Disables handle move when clicking the slider bar
   */
  snapDragDisabled: _propTypes2.default.bool,

  /**
   * Inverts the slider.
   */
  invert: _propTypes2.default.bool,

  /**
   * Callback called before starting to move a handle.
   */
  onBeforeChange: _propTypes2.default.func,

  /**
   * Callback called on every value change.
   */
  onChange: _propTypes2.default.func,

  /**
   * Callback called only after moving a handle has ended.
   */
  onAfterChange: _propTypes2.default.func,

  tooltip: _propTypes2.default.object
}, _temp);
exports.default = Slider;
module.exports = exports['default'];