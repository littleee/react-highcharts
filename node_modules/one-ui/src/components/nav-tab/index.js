import React, { Component } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';

export default class TabNav extends Component {
  static Panel = class Panel extends Component {
    static defaultProps = {
      title: '',
      href: null,
      handleClick: () => {},
      contentheight: 'auto'
    };

    render() {
      return (
        <div className="tab-content" style={{ height: this.props.contentheight }}>
          { this.props.children }
        </div>
      )
    }
  }

  static defaultProps = {
    className: undefined,
    active: 0,
    children: undefined,
    theme: undefined,
    rights: []
  };

  static propTypes = {
    className: PropTypes.string,
    active: PropTypes.number,
    theme: PropTypes.oneOf([ 'line', 'out' ]),
    rights: PropTypes.array
  };

  constructor(props, context){
    super(props, context);

    this.state = {
      active: props.active
    };
  }

  setActive(index) {
    const len = this.props.children.length - 1;

    this.setState({
      active: index < 0 ? 0 : (index > len ? len : index)
    });

    if (this.props.setActive) {
      this.props.setActive(index);
    }
  }

  componentWillReceiveProps(nextProps) {
    this.setState({
      active: nextProps.active
    });
  }

  handleSwitchNavTab(panel, index) {
    this.setActive(index);

    panel.props.handleClick();
  }

  render(){
    const children = React.Children.toArray(this.props.children);
    const theme = this.props.theme ? `tabs-${ this.props.theme }` : null;

    return (
      <div className={cx('nav-tab', this.props.className)}>
        <div className={ cx('nav-tabs', theme) }>
        {
          children.map((panel, index) => {
            var ref = `tab-menu-${index}`;

            return (
              <a
                ref={ref} key={panel.key}
                href={ panel.props.href || 'javascript:;' }
                onClick={ this.handleSwitchNavTab.bind(this, panel, index) }
                className={cx('tabs-item', {
                  'active': this.state.active === index
                })}>
                { panel.props.title }
              </a>
            )
          })
        }
          <div className="pull-right">
          {
            this.props.rights.map((c, i) => {
              return (
                <div key={i} className="widget-tab-item">{c}</div>
              )
            })
          }
          </div>
        </div>
        {
          children[this.state.active] && children[this.state.active].props.href ? null : (
            children[this.state.active]
          )
        }
      </div>
    )
  }
}
