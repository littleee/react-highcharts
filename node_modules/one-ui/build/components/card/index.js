'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Card = (_temp = _class = function (_Component) {
  _inherits(Card, _Component);

  function Card() {
    _classCallCheck(this, Card);

    return _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
  }

  _createClass(Card, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          rights = _props.rights,
          title = _props.title;

      var className = this.props.shadow ? ' panel-shadow' : null;

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('panel', className, this.props.className) },
        _react2.default.createElement(
          'div',
          { className: 'panel-heading' },
          _lodash2.default.isString(title) ? _react2.default.createElement(
            'h5',
            { className: 'panel-title' },
            title
          ) : title,
          _lodash2.default.isArray(rights) && rights.length > 0 ? _react2.default.createElement(
            'div',
            { className: 'panel-extra' },
            rights.map(function (item, key) {
              return Object.assign({}, item, { key: key });
            })
          ) : null
        ),
        this.props.children
      );
    }
  }]);

  return Card;
}(_react.Component), _class.defaultProps = {
  title: 'panel',
  shadow: false,
  rights: []
}, _temp);
exports.default = Card;
module.exports = exports['default'];