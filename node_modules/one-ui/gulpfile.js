var gulp = require('gulp');
var postcss = require('gulp-postcss');
var cssnext = require('cssnext');
var autoprefixer = require('autoprefixer');
var sourcemaps = require('gulp-sourcemaps');
var sass = require('gulp-sass');
var cssnano = require('cssnano');
var comments = require('postcss-discard-comments')
var rename = require('gulp-rename');

var processors = [
  autoprefixer, cssnext, cssnano, comments({removeAll: true})
];

/**
 * 编译样式文件
 */
gulp.task('build', function () {
  return gulp.src(['src/scss/**.scss'])
            .pipe( sourcemaps.init() )
            .pipe( sass() )
            .pipe( postcss(processors) )
            .pipe( rename(function (path) {
              path.dirname = path.basename === 'one-ui' ? '' : 'one-ui';
            }) )
            .pipe( sourcemaps.write('.') )
            .pipe( gulp.dest('./build') );
});

/**
 * 编译组件私有样式
 */
gulp.task('build:component-scss', function () {
  return gulp.src(['src/components/**/**.scss'])
            .pipe( sass() )
            .pipe( postcss(processors) )
            .pipe( gulp.dest('./src/components') )
            .pipe( gulp.dest('./build/components') );
});

/**
 * 文档样式
 */
gulp.task('docs', function () {
  return gulp.src(['docs/**/**.scss'])
            .pipe( sourcemaps.init() )
            .pipe( sass() )
            .pipe( postcss(processors) )
            .pipe( sourcemaps.write('.') )
            .pipe( gulp.dest('./build') );
});

gulp.task('watch', function () {
  gulp.watch(['src/scss/**.scss', 'src/components/**/**.scss', 'docs/**/**.scss'], ['build', 'docs', 'build:component-scss']);
});

gulp.task('release', ['build', 'build:component-scss', 'docs']);

gulp.task('default', ['build', 'build:component-scss', 'docs', 'watch']);
