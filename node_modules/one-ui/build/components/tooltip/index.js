'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactTooltip = (_temp = _class = function (_React$Component) {
  _inherits(ReactTooltip, _React$Component);

  function ReactTooltip(props) {
    _classCallCheck(this, ReactTooltip);

    var _this = _possibleConstructorReturn(this, (ReactTooltip.__proto__ || Object.getPrototypeOf(ReactTooltip)).call(this, props));

    _this.state = {
      show: false,
      placeholder: '',
      maxWidth: undefined,
      x: 'auto',
      y: 'auto',
      place: _this.props.place,
      ttype: _this.props.ttype,
      effect: _this.props.effect
    };

    _this.showTooltip = _this.showTooltip.bind(_this);
    _this.updateTooltip = _this.updateTooltip.bind(_this);
    _this.hideTooltip = _this.hideTooltip.bind(_this);
    return _this;
  }

  _createClass(ReactTooltip, [{
    key: 'showTooltip',
    value: function showTooltip(e) {
      var $target = (0, _jquery2.default)(e.currentTarget);

      this.setState({
        className: $target.attr('data-class'),
        placeholder: $target.attr('data-tip'),
        maxWidth: $target.attr('data-max-width'),
        place: $target.data('place') ? $target.data('place') : this.props.place ? this.props.place : 'top',
        type: $target.data('type') ? $target.data('type') : this.props.type ? this.props.type : 'dark',
        effect: $target.data('effect') ? $target.data('effect') : this.props.effect ? this.props.effect : 'float'
      });

      this.updateTooltip(e);
    }
  }, {
    key: 'updateTooltip',
    value: function updateTooltip(e) {
      var $target = (0, _jquery2.default)(e.currentTarget);

      if (this.state.effect === 'float') {
        this.setState({
          className: $target.attr('data-class'),
          placeholder: $target.attr('data-tip'),
          show: true,
          x: e.clientX,
          y: e.clientY
        });
      } else if (this.state.effect === 'solid') {
        var offset = $target.offset();
        var $tooltip = (0, _jquery2.default)('[data-id="tooltip"]');
        var targetTop = offset.top;
        var targetLeft = offset.left;
        var tipWidth = $tooltip.length ? $tooltip.width() : 0;
        var tipHeight = $tooltip.length ? $tooltip.height() : 0;
        var tipPadding = $tooltip.length ? $tooltip.css('padding') : 0;
        var targetWidth = $target.width();
        var targetHeight = $target.height();
        var place = this.state.place;

        var x = void 0,
            y = void 0;

        if (place === 'top') {
          x = targetLeft - tipWidth / 2 + targetWidth / 2;
          y = targetTop - tipHeight - 8;
        } else if (place === 'bottom') {
          x = targetLeft - tipWidth / 2 + targetWidth / 2;
          y = targetTop + targetHeight + 8;
        } else if (place === 'left') {
          x = targetLeft - tipWidth - 6;
          y = targetTop + targetHeight / 2 - tipHeight / 2;
        } else if (place === 'right') {
          x = targetLeft + targetWidth + 6;
          y = targetTop + targetHeight / 2 - tipHeight / 2;
        }

        this.setState({
          className: $target.attr('data-class'),
          placeholder: $target.attr('data-tip'),
          show: true,
          maxWidth: $target.attr('data-max-width'),
          x: x ? x : this.state.x,
          y: y ? y : this.state.y
        });
      }
    }
  }, {
    key: 'hideTooltip',
    value: function hideTooltip(e) {
      this.setState({
        show: false,
        x: -9999,
        y: -9999
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      (0, _jquery2.default)(document).delegate('[data-tip]', 'mouseover', this.showTooltip).delegate('[data-tip]', 'mousemove', this.updateTooltip).delegate('[data-tip]', 'mouseleave', this.hideTooltip);

      // 当 hash 发生改变时隐藏 tooltip, 也可以用 MutationObserver 监听目标 DOM 解决；
      (0, _jquery2.default)(window).on('hashchange', this.hideTooltip);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      (0, _jquery2.default)(document).undelegate('[data-tip]', 'mouseover', this.showTooltip).undelegate('[data-tip]', 'mousemove', this.updateTooltip).undelegate('[data-tip]', 'mouseleave', this.hideTooltip);

      (0, _jquery2.default)(window).off('hashchange', this.hideTooltip);
    }
  }, {
    key: 'render',
    value: function render() {
      var $tooltip = (0, _jquery2.default)('[data-id="tooltip"]');
      var tipWidth = $tooltip.length ? $tooltip.width() : 0;
      var tipHeight = $tooltip.length ? $tooltip.height() : 0;
      var offset = { x: 0, y: 0 };
      var effect = this.state.effect;

      var classNames = $tooltip.attr('data-class');

      if (effect === 'float') {
        if (this.state.place === 'top') {
          offset.x = -(tipWidth / 2);
          offset.y = -50;
        } else if (this.state.place === 'bottom') {
          offset.x = -(tipWidth / 2);
          offset.y = 30;
        } else if (this.state.place === 'left') {
          offset.x = -(tipWidth + 15);
          offset.y = -(tipHeight / 2);
        } else if (this.state.place === 'right') {
          offset.x = 10;
          offset.y = -(tipHeight / 2);
        }
      }

      var style = {
        zIndex: 9999,
        left: (!this.state.x || this.state.x === 'auto' ? 0 : this.state.x) + offset.x + 'px',
        top: (!this.state.y || this.state.y === 'auto' ? 0 : this.state.y) + offset.y + 'px'
      };

      if (this.state.maxWidth != null) {
        style.maxWidth = this.state.maxWidth + 'px';
      }

      var tooltipClass = (0, _classnames2.default)('popover popover-mini', this.state.className, { 'd-inline-block': this.state.show }, { 'top': this.state.place === 'top' }, { 'bottom': this.state.place === 'bottom' }, { 'left': this.state.place === 'left' }, { 'right': this.state.place === 'right' }, { 'type-dark': this.state.type === 'dark' }, { 'type-success': this.state.type === 'success' }, { 'type-warning': this.state.type === 'warning' }, { 'type-error': this.state.type === 'error' }, { 'type-info': this.state.type === 'info' });

      return _react2.default.createElement(
        'div',
        { className: tooltipClass, style: style, 'data-id': 'tooltip' },
        _react2.default.createElement('span', { className: 'arrow' }),
        _react2.default.createElement('div', { className: 'popover-content', dangerouslySetInnerHTML: {
            __html: this.state.placeholder
          } })
      );
    }
  }]);

  return ReactTooltip;
}(_react2.default.Component), _class.defaultProps = {
  effect: 'float',
  place: 'top'
}, _class.propTypes = {
  place: _propTypes2.default.string,
  ttype: _propTypes2.default.string,
  effect: _propTypes2.default.string
}, _temp);
exports.default = ReactTooltip;


(0, _jquery2.default)(function () {
  var $el = (0, _jquery2.default)('<div />');
  $el.appendTo('body');
  _reactDom2.default.render(_react2.default.createElement(ReactTooltip, { ttype: 'dark', effect: 'solid' }), $el.get(0));
});
module.exports = exports['default'];