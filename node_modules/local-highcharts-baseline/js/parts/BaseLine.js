
var BaseLineSeries = extendClass(Series, {
    drawLegendSymbol: LegendSymbolMixin.drawLineMarker
});
seriesTypes.baseLine = BaseLineSeries;

// baseLine code
var BaseLineAreaSeries = extendClass(AreaSeries, {
    drawLegendSymbol: LegendSymbolMixin.drawLineMarker
});
seriesTypes.baseLineArea = BaseLineAreaSeries;

function BaseLine(axis, value, start, end, startText, endText) {
    this.axis = axis;
    this.line = null;
    this.value = value;
    this.start = start;
    this.end = end;
    this.startText = startText;
    this.endText = endText;
    this.x1 = 0;
    this.x2 = 0;
    this.top = 0;
    this.width = 1;
};

BaseLine.prototype = {
    render: function(old, opacity) {
        var bline = this,
            prefix = 'baseLine',
            axis = bline.axis,
            chart = axis.chart,
            xAxis = chart.xAxis[0],
            options = axis.options,
            value = bline.value,
            start = bline.start,
            end = bline.end,
            x1 = correctFloat( // #5236
                xAxis.translate(start, 0, 0, 0, 1, undefined, false) // #3923
            ) + chart.plotLeft,
            x2 = correctFloat( // #5236
                xAxis.translate(end, 0, 0, 0, 1, undefined, false) // #3923
            ) + chart.plotLeft,
            renderer = chart.renderer,
            line = bline.line,
            baseLineWidth = options[prefix + 'Width'],
            baseLineColor = options[prefix + 'Color'],
            baseLineDashArray = options[prefix + 'DashArray'],
            baseLinePath;

        this.x1 = x1;
        this.x2 = x2;

        opacity = pick(opacity, 1);
        if (baseLineWidth) {
            baseLinePath = this.getPlotLinePath(axis, value, baseLineWidth, old, x1, x2, false);
            if (!line) {
                var attribs = {
                    'stroke': baseLineColor,
                    'stroke-width': baseLineWidth,
                    'stroke-dasharray': baseLineDashArray
                };
                if (old) {
                    attribs.opacity = 0;
                }
                if (baseLinePath) {
                    this.line = line = renderer.path(baseLinePath).attr(attribs).add(axis.baseLineGroup);
                    this.top = baseLinePath[2];
                    this.width = baseLineWidth;
                }
            }
        }

        if (line && baseLinePath) {
            line[this.isNew ? 'attr' : 'animate']({
                d: baseLinePath,
                opacity: opacity
            });

            if (!this.isNew) {
                this.top = baseLinePath[2];
            }
        }

        if (baseLinePath) {
            this.isNew = false
        }
    },
    getPlotLinePath: function(axis, value, lineWidth, old, x1, x2, force, translatedValue) {
        var chart = axis.chart,
            axisLeft = axis.left,
            axisTop = axis.top,
            axisWidth = axis.width,
            y1,
            y2,
            cHeight = (old && chart.oldChartHeight) || chart.chartHeight,
            cWidth = (old && chart.oldChartWidth) || chart.chartWidth,
            skip,
            transB = axis.transB,
            /**
             * Check if x is between a and b. If not, either move to a/b or skip,
             * depending on the force parameter.
             */
            between = function(x, a, b) {
                if (x < a || x > b) {
                    if (force) {
                        x = mathMin(mathMax(a, x), b);
                    } else {
                        skip = true;
                    }
                }
                return x;
            };

        translatedValue = pick(translatedValue, axis.translate(value, null, null, false));
        y1 = y2 = mathRound(cHeight - translatedValue - transB);
        if (!isNumber(translatedValue)) { // no min or max
            skip = true;
        } else {
            y1 = y2 = between(y1, axisTop, axisTop + axis.height);
        }
        return skip && !force ?
            null :
            chart.renderer.crispLine([M, x1< axisLeft ? axisLeft: x1, y1, L, x2 < axisWidth + axisLeft ? x2 : axisWidth + axisLeft, y2], lineWidth || 1);
    }
};
