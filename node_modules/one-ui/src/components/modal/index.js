import $ from 'jquery';
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import cx from 'classnames';
import hashChange from '../../decorators/hashChange';
import PropTypes from 'prop-types';

let zIndex = 1000;

@hashChange((dom, component) => {
  if (component instanceof Modal) {
    component.close();
  }

  component.unbind();
})

export default class Modal extends Component {
  static defaultProps = {
    modal: true,
    title: '',
    draggable: true,
    resizable: false,
    defaultSize: {
      width: 'auto',
      height: 'auto'
    },
    defaultPosition: {
      top: 30,
      right: 30,
      bottom: 30,
      left: 30
    },
    onClose: () => {},
    onResume: () => {},
    onMinimize: () => {},
    className: null,
    headerClassName: null
  };

  static propTypes = {
    title: PropTypes.any,
    modal: PropTypes.bool,
    resizable: PropTypes.bool,
    defaultSize: PropTypes.object,
    defaultPosition: PropTypes.object,
    onClose: PropTypes.func,
    onResume: PropTypes.func,
    onMinimize: PropTypes.func
  };

  /**
   * 挂载对话框
   *
   * @param  {Object} props
   * @param  {Object} parent
   * @return {Object}
   */
  static mount(props = {}, parent = document.body) {
    zIndex += 1;
    var container = $('<div class="modal" />').get(0);

    parent.appendChild(container);

    return ReactDOM.render(<this {...props} />, container, function () {
      $(this.refs.dialog).after('<div class="modal-backdrop" />');

      this.__container = container;
    });
  }

  /**
   * 卸载对话框
   *
   * @param  {Object} dialog
   * @return {Undefined}
   */
  static unMount(dialog) {
    zIndex -= 1;

    if (dialog.__container) {
      ReactDOM.unmountComponentAtNode(dialog.__container);

      if ( dialog.__container.parentNode) {
        dialog.__container.parentNode.removeChild(dialog.__container);
      }
    }
  }

  constructor(props, context) {
    super(props, context);

    this.close = this.close.bind(this);
    this.state = {
      minimized: false,
      style: Object.assign({zIndex}, this.props.defaultSize, this.props.defaultPosition)
    };

    this._startDrag = this._startDrag.bind(this);
    this._dragging  = this._dragging.bind(this);
    this._stopDrag  = this._stopDrag.bind(this);
  }

  /**
   * 卸载对话框
   *
   * @return {Undefined}
   */
  close() {
    this.constructor.unMount(this);

    let { onClose } = this.props;

    if ( $.isFunction(onClose) ) onClose();
  }

  /**
   * 最小化对话框
   *
   * @return {Undefined}
   */
  minimize() {
    this.setState({
      minimized: true
    }, () => {
      this.props.onMinimize();
    });
  }

  /**
   * 最大化对话框
   *
   * @return {Undefined}
   */
  maximize() {
    this.setState({
      minimized: false
    }, () => {
      this.props.onResume();
    });
  }

  _startDrag(e) {
    var outOffset = this.$dialog.offsetParent().offset(),
      dialogOffset = this.$dialog.offset(),
      offset = {
        x: outOffset.left + (e.pageX - dialogOffset.left),
        y: outOffset.top + (e.pageY - dialogOffset.top)
      };

    $(document).on('mousemove', null, offset, this._dragging)
               .on('mouseup', this._stopDrag);
  }

  _dragging(e) {
    e.stopPropagation();
    e.preventDefault();

    var position = {
      x: e.pageX - e.data.x,
      y: e.pageY - e.data.y
    };

    this.state.style.left = position.x;
    this.state.style.top = position.y;

    this.$dialog.css({
      left: position.x,
      top: position.y
    });
  }

  _stopDrag(e) {
    $(document).off('mousemove', this._dragging)
               .off('mouseup', this._stopDrag);
  }

  componentDidMount() {
    var $dialog = this.$dialog = $(this.refs.dialog),
      $header = $(this.refs.header);

    if (this.props.draggable) {
      $header.on('mousedown', this._startDrag);
    }
  }

  componentWillUnmount() {
    var $dialog = $(this.refs.dialog),
      $header = $(this.refs.header);

    if (this.props.draggable) {
      $header.off('mousedown', this._startDrag);
    }
  }

  renderCtrls() {
    // <i className="icon" onClick={ this.minimize.bind(this) }>&#xe62d;</i> 最小化功能暂时不需要，留作备份

    return (
      <button className="icon close" onClick={ this.close.bind(this) }>&#xe64a;</button>
    );
  }

  renderHeader() {
    return(
      <span className="modal-title">{ this.props.title }</span>
    );
  }

  renderBody() {
    return (
      <div>请重写 render body 方法</div>
    );
  }

  renderFooter() {
    // ...
  }

  render() {
    const style = this.props.draggable ? { style: {cursor: 'move'} } : null;

    return(
      <div
        ref="dialog"
        className={cx('modal-content', {
          'minimized': this.state.minimized
        }, this.props.className)}
        style={ this.state.style }
      >
        <div
          {...style}
          ref="header"
          className={ cx('modal-header', this.props.headerClassName) }
        >
          <div className="pull-right">
            { this.renderCtrls() }
          </div>
          { this.renderHeader() }
        </div>
        <div className="modal-body" ref="body">
          { this.props.children || this.renderBody() }
        </div>
        {
          this.renderFooter()
        }
        {
          /* @TODO
            <div className="modal-minimized">
              { this.props.title }
              <i className="icon" onClick={ this.maximize.bind(this) }>&#xe62d;</i>
              <i className="icon">&#xe64a;</i>
            </div>
           */
        }
      </div>
    )
  }
}
