import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';

class Layout extends React.Component {
  static defaultProps = {
    type: 'flex',
    grid: 1,
    height: undefined,
    direction: 'col',
    alignSelf: undefined,
    horizontal: undefined,
    vertical: undefined,
    attrs: undefined,
    className: undefined
  };

  static propTypes = {
    type: PropTypes.oneOf([
      'flex', 'grid'
    ]),
    grid: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
      PropTypes.bool
    ]),
    alignSelf: PropTypes.oneOf([
      'top', 'center', 'bottom'
    ]),
    direction: PropTypes.oneOf([
      'col', 'row'
    ]),
    horizontal: PropTypes.oneOf([
      'left', 'center', 'right', 'around', 'between'
    ]),
    vertical: PropTypes.oneOf([
      'top', 'middle', 'bottom'
    ]),
    attrs: PropTypes.any,
    className: PropTypes.any
  };

  render() {
    const { direction, vertical, alignSelf, grid, horizontal } = this.props,
      isFlex = this.props.type === 'flex';

    let classNames = '';

    if (isFlex) {
      if (Boolean(+grid) === false) {
        classNames = typeof direction === 'string' ? `flex-${ direction }` : 'flex'; // flex, flex-row, flex-col
      } else {
        if (typeof +grid === 'number') {
          if (typeof direction === 'string') { // flex-row-* flex-col-*
            classNames = `flex-${ direction }-${ grid }`;
          } else {
            classNames = `flex-${ grid }`; // flex-*
          }
        }
      }
    } else {
      classNames = `pure-u-${ grid }`; // pure-u-*-*
    }

    let style = {};

    if ( ! _.isUndefined(this.props.height) ) {
      style = isFlex ? { flexBasis: this.props.height } : { height: this.props.height };
    }

    return (
      <div className={ cx(classNames, {
        [`flex-items-${ horizontal }`]: isFlex && typeof horizontal !== 'undefined',
        [`flex-items-${ vertical }`]: isFlex && typeof vertical !== 'undefined',
        [`flex-${ alignSelf }`]: isFlex && typeof alignSelf !== 'undefined'
      }, this.props.className) } style={style} { ...this.props.attrs }>
        { this.props.children }
      </div>
    );
  }
}

export default Layout;
