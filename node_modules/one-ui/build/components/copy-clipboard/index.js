'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _zeroclipboard = require('zeroclipboard');

var _zeroclipboard2 = _interopRequireDefault(_zeroclipboard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CopyClipboard = (_temp = _class = function (_Component) {
  _inherits(CopyClipboard, _Component);

  function CopyClipboard(props) {
    _classCallCheck(this, CopyClipboard);

    var _this = _possibleConstructorReturn(this, (CopyClipboard.__proto__ || Object.getPrototypeOf(CopyClipboard)).call(this, props));

    _this.isCopied = false;

    _zeroclipboard2.default.config({
      swfPath: props.staticPath
    });
    return _this;
  }

  _createClass(CopyClipboard, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var element = _reactDom2.default.findDOMNode(this),
          client = new _zeroclipboard2.default(element);

      this.client = client;

      client.on('ready', function () {
        client.on('beforecopy', function () {
          client.setText(_this2.props.text);
        });

        client.on('aftercopy', function () {
          var _this3 = this;

          if (this.isCopied === true) return;

          var $result = (0, _jquery2.default)('<span class="copied" style="position: relative; margin-left: 5px">已复制</span>');

          (0, _jquery2.default)(element).append($result);

          setTimeout(function () {
            $result.fadeOut(function () {
              $result.remove();
              _this3.isCopied = false;
            });
          }, 1000);

          this.isCopied = true;
        });
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.client.destroy();
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children || null;
    }
  }]);

  return CopyClipboard;
}(_react.Component), _class.defaultProps = {
  text: 'Copy Text',
  staticPath: '/sources/ZeroClipboard.swf'
}, _temp);
exports.default = CopyClipboard;
module.exports = exports['default'];