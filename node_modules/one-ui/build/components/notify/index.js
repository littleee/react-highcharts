'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoticeContainer = undefined;

var _class, _temp;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _events = require('events');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _notices = [];
var CHANGE_EVENT = 'change';

var noticeStore = _lodash2.default.extend({}, _events.EventEmitter.prototype, {
  add: function add(noticeProps) {
    _notices.push(_lodash2.default.defaults(noticeProps, {
      $id: _lodash2.default.uniqueId('notice'),
      autoClose: true
    }));

    this.emitChange();
  },

  remove: function remove($id) {
    _notices = _notices.filter(function (n) {
      return n.$id !== $id;
    });

    this.emitChange();
  },

  emitChange: function emitChange() {
    this.emit(CHANGE_EVENT);
  },

  addChangeListener: function addChangeListener(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  removeChangeListener: function removeChangeListener(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  }
});

var NoticeContainer = exports.NoticeContainer = function (_React$Component) {
  _inherits(NoticeContainer, _React$Component);

  function NoticeContainer(props) {
    _classCallCheck(this, NoticeContainer);

    var _this = _possibleConstructorReturn(this, (NoticeContainer.__proto__ || Object.getPrototypeOf(NoticeContainer)).call(this, props));

    _this.state = {
      notices: _notices
    };

    _this._onChange = _this._onChange.bind(_this);
    return _this;
  }

  _createClass(NoticeContainer, [{
    key: '_onChange',
    value: function _onChange() {
      this.setState({
        notices: _notices
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      noticeStore.addChangeListener(this._onChange);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      noticeStore.removeChangeListener(this._onChange);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'alert-list', style: { zIndex: 9999 } },
        _react2.default.createElement(
          'ul',
          null,
          this.state.notices.map(function (notice) {
            return _react2.default.createElement(
              Notice,
              {
                ref: notice.$id,
                key: notice.$id,
                id: notice.$id,
                autoClose: notice.autoClose,
                noticeType: notice.noticeType
              },
              notice.children
            );
          }, this)
        )
      );
    }
  }]);

  return NoticeContainer;
}(_react2.default.Component);

var Notice = (_temp = _class = function (_React$Component2) {
  _inherits(Notice, _React$Component2);

  function Notice() {
    _classCallCheck(this, Notice);

    return _possibleConstructorReturn(this, (Notice.__proto__ || Object.getPrototypeOf(Notice)).apply(this, arguments));
  }

  _createClass(Notice, [{
    key: 'close',
    value: function close() {
      var _this3 = this;

      if (this.timer) {
        clearTimeout(this.timer);
      }

      if (this.animating) {
        return;
      }

      var id = this.props.id;
      this.animating = true;

      (0, _jquery2.default)(this.refs.root).fadeOut(function () {
        _this3.animating = false;
        noticeStore.remove(id);
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.autoClose) {
        this.timer = setTimeout(this.close.bind(this), 3000);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.timer) {
        clearTimeout(this.timer);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var noticeType;

      switch (this.props.noticeType) {
        case 'success':
          noticeType = 'alert-primary';
          break;
        case 'info':
          noticeType = 'alert-info';
          break;
        case 'warning':
          noticeType = 'alert-danger';
          break;
        case 'primary':
          noticeType = 'alert-primary';
          break;
        default:
          noticeType = 'alert-danger';
          break;
      }

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('alert', noticeType), ref: 'root' },
        _react2.default.createElement(
          'a',
          { className: 'icon close', href: 'javascript:;', onClick: this.close.bind(this) },
          '\uE64A'
        ),
        _react2.default.createElement(
          'div',
          { className: 'alert-inner' },
          _lodash2.default.isFunction(this.props.children) ? this.props.children(this) : this.props.children
        )
      );
    }
  }]);

  return Notice;
}(_react2.default.Component), _class.defaultProps = {
  id: undefined,
  autoClose: false,
  noticeType: 'primary'
}, _class.Primary = function (content, options) {
  return noticeStore.add(_lodash2.default.extend({}, options || {}, {
    noticeType: 'primary',
    children: content
  }));
}, _class.Success = function (content, options) {
  return noticeStore.add(_lodash2.default.extend({}, options || {}, {
    noticeType: 'success',
    children: content
  }));
}, _class.Info = function (content, options) {
  return noticeStore.add(_lodash2.default.extend({}, options || {}, {
    noticeType: 'info',
    children: content
  }));
}, _class.Warning = function (content, options) {
  return noticeStore.add(_lodash2.default.extend({}, options || {}, {
    noticeType: 'warning',
    children: content
  }));
}, _class.Error = function (content, options) {
  return noticeStore.add(_lodash2.default.extend({}, options || {}, {
    noticeType: 'error',
    children: content
  }));
}, _temp);
exports.default = Notice;