import React from 'react';
import Page from '../components/page/index.jsx';

class ToolsExamples extends React.Component {
  render() {
    return (
      <Page alias="辅助类">
        <div className="section">
          <h3>快速浮动</h3>
          <div className="example-area">
            通过添加一个类，可以将任意元素向左或向右浮动。<code>!important</code> 被用来明确 CSS 样式的优先级。
          </div>
          <div className="source-code-area">
            <pre>
              <code>
{`<div class="pull-left">...</div>
<div class="pull-right">...</div>`}
              </code>
            </pre>
          </div>
        </div>

        <div className="section">
          <h3>清除浮动</h3>
          <div className="example-area">
            通过为父元素添加 <code>.clearfix</code> 类可以很容易地清除浮动（float）。这里所使用的是 Nicolas Gallagher 创造的 micro clearfix 方式。
          </div>
          <div className="source-code-area">
            <pre>
              <code>
{`<!-- Usage as a class -->
<div class="clearfix">...</div>` }
              </code>
            </pre>
          </div>
        </div>

        <div className="section">
          <h3>展示</h3>
          <div className="example-area">
            提供多种方式：<code>.d-block</code> <code>.d-inline-block</code> <code>.d-inline</code> <code>.d-hide</code>
          </div>
          <div className="source-code-area">
            <pre>
              <code>
{ `<!-- Usage as a class -->
<div class="d-block">...</div>` }
              </code>
            </pre>
          </div>
        </div>

        <div className="section">
          <h3>定位</h3>
          <div className="example-area">
            如果你想让某个元素的定位为相对定位，只需加上：<code>relative</code> 样式类即可，又或者你需要将一个元素绝对定位然后四角拉伸达到伪全屏的效果，很简单，只需使用 <code>.fullpage</code> 样式类。
          </div>
          <div className="source-code-area">
            <pre>
              <code>
{ `<!-- Usage as a class -->
<div class="relative">
  <div class="fullpage scroll-y">...</div>
</div>` }
              </code>
            </pre>
          </div>
        </div>

        <div className="section">
          <h3>滚动</h3>
          <div className="example-area">
            在正常的网页中，是很少看到横向滚动条的，但是在某些情况下是需要横向滚动条的，当在内容超宽后需要出横向滚动条时，使用 <code>.scroll-x</code> 辅助类即可，<code>.scroll-y</code> 同理。
          </div>
          <div className="source-code-area">
            <pre>
              <code>
{ `<!-- Usage as a class -->
<div class="scroll-y">...</div>
<div class="scroll-x">...</div>` }
              </code>
            </pre>
          </div>
        </div>

        <div className="section">
          <h3>边框</h3>
          <div className="example-area">
            <p>考虑到各项目中带边框的场景的情况，故提供了一些固定颜色和边框宽度的辅助类，如：<code>.b-t-1</code>...</p>
            <p><code>b-（t：上）-（r：右）-（b：下）-（l：左）</code> 基本跟 CSS 的使用方式一样。举个栗子，我想给某个元素的上、右都加上边框，那么对应的样式类应该是 <code>.b-t-l-1</code>。</p>
          </div>
          <div className="source-code-area">
            <pre>
              <code>
{ `<!-- Usage as a class -->
<div class="b-t-b-1">...</div> <!-- 上、下都加边框 -->
<div class="b-t-l-1">...</div> <!-- 上、左都加边框 -->
<div class="b-1">...</div> <!-- 四周都加边框 -->
<div class="b-t-1">...</div> <!-- 仅给顶部都加边框 -->` }
              </code>
            </pre>
          </div>
        </div>
      </Page>
    );
  }
}

export default ToolsExamples;
