import React from 'react';
import $ from 'jquery';
import _ from 'lodash';
import cx from 'classnames';
import { EventEmitter } from 'events';

let _notices = [];
const CHANGE_EVENT = 'change';

const noticeStore = _.extend({}, EventEmitter.prototype, {
  add: function(noticeProps){
    _notices.push(_.defaults(noticeProps, {
      $id: _.uniqueId('notice'),
      autoClose: true
    }));

    this.emitChange();
  },

  remove: function($id) {
    _notices = _notices.filter(function(n) {
      return n.$id !== $id;
    });

    this.emitChange();
  },

  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },

  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  }
});

export class NoticeContainer extends React.Component {
  constructor(props){
    super(props);

    this.state = {
      notices: _notices
    };

    this._onChange = this._onChange.bind(this);
  }

  _onChange(){
    this.setState({
      notices: _notices
    });
  }

  componentDidMount(){
    noticeStore.addChangeListener(this._onChange);
  }

  componentWillUnmount(){
    noticeStore.removeChangeListener(this._onChange);
  }

  render(){
    return (
      <div className="alert-list" style={{zIndex: 9999}}>
        <ul>
          {
            this.state.notices.map(function(notice) {
              return (
                <Notice
                  ref={ notice.$id }
                  key={ notice.$id }
                  id={ notice.$id }
                  autoClose={ notice.autoClose }
                  noticeType={ notice.noticeType }
                >
                  { notice.children }
                </Notice>
              )
            }, this)
          }
        </ul>
      </div>
    )
  }
}

class Notice extends React.Component{
  static defaultProps = {
    id: undefined,
    autoClose: false,
    noticeType: 'primary'
  };

  static Primary = function (content, options) {
    return noticeStore.add(_.extend({}, options || {}, {
      noticeType: 'primary',
      children: content
    }));
  };

  static Success = function (content, options) {
    return noticeStore.add(_.extend({}, options || {}, {
      noticeType: 'success',
      children: content
    }));
  };

  static Info = function (content, options) {
    return noticeStore.add(_.extend({}, options || {}, {
      noticeType: 'info',
      children: content
    }));
  };

  static Warning = function (content, options) {
    return noticeStore.add(_.extend({}, options || {}, {
      noticeType: 'warning',
      children: content
    }))
  };

  static Error = function (content, options) {
    return noticeStore.add(_.extend({}, options || {}, {
      noticeType: 'error',
      children: content
    }));
  };

  close() {
    if (this.timer) {
      clearTimeout(this.timer)
    }

    if (this.animating) {
      return ;
    }

    var id = this.props.id;
    this.animating = true;

    $(this.refs.root).fadeOut(() => {
      this.animating = false;
      noticeStore.remove(id);
    });
  }

  componentDidMount(){
    if (this.props.autoClose) {
      this.timer = setTimeout(this.close.bind(this), 3000);
    }
  }

  componentWillUnmount(){
    if (this.timer) {
      clearTimeout(this.timer);
    }
  }

  render(){
    var noticeType;

    switch(this.props.noticeType) {
      case 'success':
        noticeType = 'alert-primary';
        break;
      case 'info':
        noticeType = 'alert-info';
        break;
      case 'warning':
        noticeType = 'alert-danger';
        break;
      case 'primary':
        noticeType = 'alert-primary';
        break;
      default:
        noticeType = 'alert-danger';
        break;
    }

    return (
      <div className={cx('alert', noticeType)} ref="root">
        <a className="icon close" href="javascript:;" onClick={ this.close.bind(this) }>&#xe64a;</a>
        <div className="alert-inner">
          { _.isFunction(this.props.children) ? this.props.children(this) : this.props.children }
        </div>
      </div>
    )
  }
}

export default Notice;
