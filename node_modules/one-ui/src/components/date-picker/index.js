import './index.css';
import React, { Component } from 'react';
import Slider from '../slider';
import moment from 'moment';
import _ from 'lodash';
import cx from 'classnames';

const ADAY = 24 * 3600 * 1000;

export default class DatePicker extends Component {
  static defaultProps = {
    onChange: () => {},
    defaultValue: Date.now(),
    minDate: Date.now() - 365 * 24 * 60 * 60 * 1000,
    maxDate: Date.now() + 365 * 24 * 60 * 60 * 1000,
    withTime: true,
    type: ''
  };

  constructor(props){
    super(props);

    this.state = this._stateFromDate(moment(props.defaultValue).valueOf());
    this._onForward = this._onForward.bind(this);
    this._onBackward = this._onBackward.bind(this);
    this._onChange = this._onChange.bind(this);
  }

  _isDateDisabled(date){
    var cur = moment(date).startOf('d').valueOf();
    var min = moment(this.props.minDate).startOf('d').valueOf();
    var max = moment(this.props.maxDate).endOf('d').valueOf();
    return (cur < min || cur > max);
  }

  _stateFromDate(date, dontChangeValue){
    var $currentDay = moment(date);
    var prevLastDay = moment(date).add(-1, 'month').endOf('month').valueOf(),
      nextFirstDay = moment(date).add(1, 'month').startOf('month').valueOf(),
      value = dontChangeValue ? this.state.value : date;

    return Object.assign({
      value: value
    }, {
      currentShow: date,
      year: $currentDay.year(),
      month: $currentDay.month(),
      date: moment(value).date(),
      hour: moment(value).hour(),
      minute: moment(value).minute(),
      matrix: this._generateMatrix(date),
      allowForward: nextFirstDay >= this.props.minDate && nextFirstDay <= this.props.maxDate,
      allowBackward: prevLastDay >= this.props.minDate && prevLastDay <= this.props.maxDate
    });
  }

  _generateMatrix(date) {
    var matrixStart = moment(date).startOf('month').startOf('week').startOf('day').valueOf(),
      matrixEnd = moment(date).endOf('month').endOf('week').add(1, 'week').endOf('day').valueOf();

    return _.range(matrixStart, matrixEnd, ADAY).map((i) => {
      var m = moment(i)
      return {
        value: m.valueOf(),
        date: m.date(),
        label: m.format('DD'),
        month: m.month()
      }
    }).reduce((i, acc, n) => {
      if (n % 7) {
        i[i.length - 1].push( acc );
        return i;
      } else {
        i.push([ acc ]);
        return i;
      }
    }, []);
  }

  _onChange() {
    this.props.onChange(this.state.value);
  }

  _onForward(key) {
    this.setState(this._stateFromDate(moment(this.state.currentShow).add(1, 'month').valueOf(), true));
  }

  _onBackward(key) {
    this.setState(this._stateFromDate(moment(this.state.currentShow).add(-1, 'month').valueOf(), true));
  }

  _selectDay(date) {
    this.setState(this._stateFromDate(moment(date).set('hour', this.state.hour).set('minute', this.state.minute).valueOf()), this._onChange);
  }

  _selectHour(hour) {
    this.setState(this._stateFromDate(moment(this.state.value).set('hour', hour).valueOf()), this._onChange);
  }

  _selectMinute(minute){
    this.setState(this._stateFromDate(moment(this.state.value).set('minute', minute).valueOf()), this._onChange);
  }

  render(){
    return (
      <div className="date-time-picker">
        <div className="calendar d-inline-block">
          <div className="calendar-header">
            <i className="icon" onClick={this.state.allowBackward ? this._onBackward : null}>
              &#xe68c;
            </i>
            { this.state.year }{ __('年') } { this.state.month + 1 }{ __('月') }
            <i className="icon" onClick={ this.state.allowForward ? this._onForward : null }>
              &#xe68d;
            </i>
          </div>
          <table className="table calendar-body">
            <thead>
              <tr>
                <th>{__('日')}</th>
                <th>{__('一')}</th>
                <th>{__('二')}</th>
                <th>{__('三')}</th>
                <th>{__('四')}</th>
                <th>{__('五')}</th>
                <th>{__('六')}</th>
              </tr>
            </thead>
            <tbody>
              {
                this.state.matrix.map(function(week, n) {
                  return (
                    <tr key={n}>
                      {
                        week.map(function(dayObj) {
                          if(this._isDateDisabled(dayObj.value) || dayObj.month !== this.state.month) {
                            return (
                              <td className="disabled" key={dayObj.value}>
                                {dayObj.label}
                              </td>
                            )
                          }else{
                            return (
                              <td
                                key={ dayObj.value }
                                onClick={this._selectDay.bind(this, dayObj.value)}
                                className={cx({
                                  active: dayObj.date === this.state.date
                                })}
                              >
                                { dayObj.label }
                              </td>
                            )
                          }
                        }, this)
                      }
                    </tr>
                  )
                }, this)
              }
            </tbody>
          </table>
        </div>
        {
          this.props.withTime && (
            <div className="time-picker">
              <div className="time-text flex-row-1">
                <span className="flex-item text-bold">{ this.props.type === 'start' ? __('起始') : __('结束') } {__('时间')}</span>
                <span className="flex-item">{__('请选择日期')}</span>
                <span className="flex-item">{ moment(this.state.value).format('HH') }&nbsp;:&nbsp;{ moment(this.state.value).format('mm') }</span>
              </div>

              <div className="time-item clearfix">
                <label className="time-item-label text-bold">{__('小时')}</label>
                <div className="time-item-slider">
                  <Slider
                    ref="hour"
                    value={ this.state.hour }
                    min={ 0 }
                    tooltip={{
                      'data-tip': this.state.hour
                    }}
                    minValue={moment(this.props.minDate).isSame(moment(this.state.value), 'day') ? moment(this.props.minDate).hour() : 0}
                    max={ 23 }
                    maxValue={moment(this.props.maxDate).isSame(moment(this.state.value), 'day') ? moment(this.props.maxDate).hour() : 23}
                    onChange={ (v) => this._selectHour(v) }
                  />
                </div>
              </div>

              <div className="time-item clearfix">
                <label className="time-item-label text-bold">{__('分钟')}</label>
                <div className="time-item-slider">
                  <Slider
                    ref="minute"
                    tooltip={{
                      'data-tip': this.state.minute
                    }}
                    value={ this.state.minute }
                    min={ 0 }
                    minValue={ moment(this.props.minDate).isSame(moment(this.state.value), 'day') ? moment(this.props.minDate).minute() : 0 }
                    max={ 59 }
                    maxValue={ moment(this.props.maxDate).isSame(moment(this.state.value), 'day') ? moment(this.props.maxDate).minute() : 59 }
                    onChange={ (v) => this._selectMinute(v) }
                  />
                </div>
              </div>
            </div>
          )
        }
      </div>
    )
  }
}
