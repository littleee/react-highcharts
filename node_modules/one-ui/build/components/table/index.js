'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('../empty-data-tip/index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var summary = function summary(array) {
  var result = 0;

  for (var i = 0; i < array.length; i++) {
    result += parseInt(array[i], 10);
  }

  return result;
};

var defaultColSetting = {
  key: null,
  title: null,
  width: null,
  sortable: true,
  sortfetch: true,
  template: null,
  format: function format(v) {
    return v;
  },
  render: function render(fmtVal, rowData, rowInd, colInd, rows) {
    return fmtVal;
  }
};

var normalizeWidth = function normalizeWidth(width, fullWidth) {
  if (width === undefined) {
    return 'auto';
  }

  if (typeof width === 'number') {
    return width + 'px';
  }

  return width;
};

var Table = (_temp = _class = function (_Component) {
  _inherits(Table, _Component);

  function Table(props, context) {
    _classCallCheck(this, Table);

    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props, context));

    var sortKey = props.defaultSortKey || props.sortKey || null;

    _this.state = {
      sortKey: sortKey,
      selectedRows: props.selectedRows || [],
      sortAscending: props.sortAscending || 1,
      sortFetchKey: props.sortFetchKey || null,
      data: _this.props.data || [],
      limit: 0,
      colgroups: new Array(props.columns.length)
    };

    _this.ths = [];
    _this.pageX = null; // 拖拽前的鼠标位置
    _this.target = null; // 记录当前操作的元素
    _this.$width = null; // 存储表格宽度
    _this.dragged = false; // 是否已经开始拖拽
    _this.scaledWidth = new Array(props.columns.length);
    _this.minWidth = 0;

    _this.handleMouseDown = _this.handleMouseDown.bind(_this);
    _this.handleMouseMove = _this.handleMouseMove.bind(_this);
    return _this;
  }

  _createClass(Table, [{
    key: 'syncScrollWidth2State',
    value: function syncScrollWidth2State() {
      /**
       * 说明：以下逻辑是为了处理表头固定，
       * 表内容超出高度后出现滚动条，
       * 而表头内容区域发生偏移的情况。
       *
       * |-----------------------------------|---|
       * | key | key | key | key | key | key |   |
       * |-----------------------------------|---|
       * | val | val | val | val | val | val | ↑ |
       * |-----------------------------------|   |
       * | val | val | val | val | val | val |   |
       * |-----------------------------------|   |
       * | val | val | val | val | val | val |   |
       * |-----------------------------------|   |
       * | val | val | val | val | val | val |   |
       * |-----------------------------------|   |
       * | val | val | val | val | val | val | ↓ |
       * |-----------------------------------|---|
       */
      var table = this.refs.table,
          tbody = this.refs.tbody,
          thead = this.refs.thead,
          limit = (0, _jquery2.default)(tbody).width() - (0, _jquery2.default)(table).width();

      if (limit > 0) {
        (0, _jquery2.default)(thead).css({
          'padding-right': limit
        });

        this.setState({ limit: limit });
      }
    }
  }, {
    key: 'sortDataByKey',
    value: function sortDataByKey() {
      var _this2 = this;

      if (this.state.sortKey) {
        if (this.state.sortAscending > 0) {
          this.state.data = _lodash2.default.sortBy(this.state.data, function (i) {
            return i[_this2.state.sortKey];
          }, this);
        } else {
          this.state.data = _lodash2.default.sortBy(this.state.data, function (i) {
            return i[_this2.state.sortKey];
          }, this).reverse();
        }

        this.forceUpdate();
      }
    }
  }, {
    key: 'trans2FixedWidth',
    value: function trans2FixedWidth(width) {
      var precent = parseFloat(width) / 100;
      return Math.floor(this.$width * precent);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this3 = this;

      var scaledWidth = this.scaledWidth,
          colgroups = this.state.colgroups,
          $th = (0, _jquery2.default)(this.ths[0]);


      this.syncScrollWidth2State();
      this.sortDataByKey();

      this.$width = this.refs.table.clientWidth;

      this.minWidth = parseInt($th.css('minWidth'), 10);

      _lodash2.default.fill(scaledWidth, this.minWidth);

      this.props.columns.forEach(function (_ref, key) {
        var width = _ref.width;

        if (_this3.isPercentWidth(width)) {
          width = _this3.trans2FixedWidth(width);

          scaledWidth[key] = width;
          colgroups[key] = width;
        }
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.state.limit === 0) {
        this.syncScrollWidth2State();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var sortKey = this.state.sortKey;


      sortKey = nextProps.defaultSortKey || nextProps.sortKey || sortKey;

      this.setState({
        sortKey: sortKey,
        data: nextProps.data,
        columns: nextProps.columns
      }, this.sortDataByKey);
    }
  }, {
    key: 'rowClick',
    value: function rowClick(row, index) {
      var isSelected = this.props.isSelected;

      if (isSelected) {
        if (this.props.isRadio) {
          this.state.selectedRows = [row];
        } else {
          if (!_lodash2.default.find(this.state.selectedRows, row)) {
            this.state.selectedRows.push(row);
          } else {
            this.state.selectedRows = _lodash2.default.filter(this.state.selectedRows, function (r) {
              return !_lodash2.default.isEqual(r, row);
            });
          }
        }

        this.props.getSelections(this.state.selectedRows);
        this.forceUpdate();
      }

      if (_lodash2.default.isFunction(this.props.rowClick)) {
        this.props.rowClick(row, index);
      }
    }
  }, {
    key: 'handleSort',
    value: function handleSort(key) {
      if (this.dragged === true) {
        return this.stopScaleWidth();
      }

      this.setState({
        sortAscending: this.state.sortAscending * -1,
        sortKey: key
      });

      this.state.data = _lodash2.default.sortBy(this.state.data, function (i) {
        return i[key];
      }, this);

      if (this.state.sortAscending > 0) {
        this.state.data.reverse();
      }

      var onChangeSortKey = this.props.onChangeSortKey;


      if (_lodash2.default.isFunction(onChangeSortKey)) onChangeSortKey(key);

      this.forceUpdate();
    }
  }, {
    key: 'handleSortFetch',
    value: function handleSortFetch(key) {
      if (this.dragged === true) {
        return this.stopScaleWidth();
      }

      if (this.state.sortFetchKey === key) {
        this.props.getSortKey('-' + key);
      } else {
        this.props.getSortKey(key);
      }

      this.setState({
        sortFetchKey: key
      });
    }
  }, {
    key: 'renderRow',
    value: function renderRow(row, rowInd, rows) {
      var _this4 = this;

      if (this.props.filterFn(row)) {}
      return this.props.filterFn(row) ? _react2.default.createElement(
        'tr',
        { key: rowInd, onClick: this.rowClick.bind(this, row, rowInd), className: _lodash2.default.find(this.state.selectedRows, row) ? 'active' : null },
        this.props.columns.map(function (col, colInd) {
          return _react2.default.createElement(
            'td',
            _extends({ key: col.key }, col.attrs, { className: (0, _classnames2.default)({
                'text-truncate': col.ellipsis
              }) }),
            _this4.renderCell(col, row, rowInd, colInd, rows)
          );
        })
      ) : null;
    }
  }, {
    key: 'renderCell',
    value: function renderCell(colSetting, rowData, rowInd, colInd, rows) {
      var value = rowData[colSetting['key']];
      var formatFn;

      if (colSetting.format) {
        if (typeof colSetting.format === 'string') {
          formatFn = this.props.viewOptions.helpers.format[colSetting.format];
        } else {
          formatFn = colSetting.format;
        }
      }

      if (!formatFn) {
        formatFn = defaultColSetting.format;
      }

      var fmtVal = formatFn(value);

      if (colSetting.template) {
        return _react2.default.createElement('div', { dangerouslySetInnerHTML: {
            __html: _lodash2.default.template(colSetting.template)({
              fmtVal: fmtVal,
              rowData: rowData,
              rowInd: rowInd,
              colInd: colInd,
              rows: rows,
              format: this.props.viewOptions.helpers.format
            })
          } });
      } else if (colSetting.render) {
        return colSetting.render(fmtVal, rowData, rowInd, colInd, rows, this);
      }

      return fmtVal;
    }
  }, {
    key: 'getThContent',
    value: function getThContent(column, isLast) {
      var content = [_react2.default.createElement(
        'span',
        { key: 'title', className: 'col-title' },
        column.title
      ), column.sortable ? _react2.default.createElement('span', { key: column.key + 'down', className: (0, _classnames2.default)({
          'icon sort-icon': true,
          'd-hide': column.key !== this.state.sortKey,
          'icon-up': this.state.sortAscending === 1,
          'icon-down': this.state.sortAscending === -1
        }) }) : null];

      var style = {
        right: -this.state.limit
      };

      return this.state.limit > 0 && isLast ? _react2.default.createElement(
        'div',
        { className: 'table-limit', style: style },
        content
      ) : content;
    }
  }, {
    key: 'getValue',
    value: function getValue(element, property) {
      var $element = element instanceof _jquery2.default ? element : (0, _jquery2.default)(element);

      return parseInt($element.css(property), 10);
    }

    /**
     * 处理表头列开始拖拽.
     *
     * @param  {Object} event
     * @param  {Object} target
     * @return {Undefined}
     */

  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(_ref2) {
      var _this5 = this;

      var event = _ref2.nativeEvent,
          target = _ref2.target;

      if (target.tagName !== 'TH') {
        // 如果不是 th，则往上找一次
        target = target.parentNode;
      }

      var $target = (0, _jquery2.default)(target);

      if (event.offsetX > target.offsetWidth - 10) {
        this.pageX = event.pageX;
        this.target = target;
        this.dragged = true;
        this.oldWidth = target.offsetWidth;

        var currentIndex = $target.index(),
            colgroups = [],
            stateColgroups = this.state.colgroups,
            scaledWidth = this.scaledWidth;


        _lodash2.default.each(this.ths, function (element, index) {
          var width = void 0,
              $element = (0, _jquery2.default)(element),
              borderLeftWidth = _this5.getValue($element, 'borderLeftWidth'),
              borderRightWidth = _this5.getValue($element, 'borderRightWidth'),
              fullWidth = element.clientWidth + borderLeftWidth + borderRightWidth;

          if (_lodash2.default.isUndefined(stateColgroups[index])) {
            if (index < currentIndex) {
              _this5.scaledWidth[index] = fullWidth;
            }

            width = index < currentIndex ? fullWidth : 'auto';
          } else {
            width = stateColgroups[index];
          }

          if (index < currentIndex) {
            scaledWidth[index] = fullWidth;
          }

          colgroups.push(width);
        });

        this.setState({ colgroups: colgroups });

        (0, _jquery2.default)(document).on('mousemove', this.handleMouseMove);
        (0, _jquery2.default)(document).on('mouseup', this.handleMouseUp);
      }
    }

    /**
     * 处理表头列样式.
     * 鼠标在表头列中移动，当鼠标置于末端时应显示为可拖拽的样式，提醒用于该列是可拖拽改变列宽度的。
     *
     * @param  {Object} event
     * @param  {Object} target
     * @return {Undefined}
     */

  }, {
    key: 'handleThMouseMove',
    value: function handleThMouseMove(_ref3) {
      var event = _ref3.nativeEvent,
          target = _ref3.target;

      if (target.nodeName !== 'TH') return;

      var cursor = 'default';

      if (this.dragged === true) {
        cursor = 'col-resize';
      } else {
        cursor = event.offsetX > target.offsetWidth - 10 ? 'col-resize' : 'default';
      }

      target.style.cursor = cursor;
    }

    /**
     * 开始拖拽表头列缩放宽度.
     *
     * @param  {Number} pageX
     * @return {Undefined}
     */

  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(_ref4) {
      var _this6 = this;

      var pageX = _ref4.pageX;

      var $target = (0, _jquery2.default)(this.target),
          width = this.target.clientWidth;

      if (this.dragged === true) {
        document.body.style.cursor = 'col-resize';

        if (this.oldWidth + (pageX - this.pageX) > 0) {
          width = this.oldWidth + pageX - this.pageX; // 计算拖拽的宽度
        }

        var colgroups = [],
            stateColgroups = this.state.colgroups,
            currentIndex = $target.index();


        if (width < this.minWidth) width = this.minWidth; // 当前拖拽元素的宽度不能小于最小宽度

        _lodash2.default.each(this.ths, function (element, index) {
          var _width = stateColgroups[index],
              borderLeftWidth = _this6.getValue(element, 'borderLeftWidth'),
              borderRightWidth = _this6.getValue(element, 'borderRightWidth'),
              fullWidth = element.clientWidth + borderLeftWidth + borderRightWidth;

          if (index < currentIndex) {
            _width = fullWidth;
          } else if (index === currentIndex) {
            _width = width;
          } else {
            if (fullWidth < _this6.minWidth) {
              _width = _this6.minWidth;
            }
          }

          _width = _width < _this6.minWidth ? _this6.minWidth : _width;

          colgroups.push(_width); // 其他元素的宽度不能小于最小宽度
        });

        var scaledWidth = [].concat(_toConsumableArray(this.scaledWidth.slice(0, currentIndex)), [width], _toConsumableArray(this.scaledWidth.slice(currentIndex + 1))),
            isOverflow = this.$width - summary(scaledWidth) < 0;

        if (isOverflow && pageX > this.pageX) {
          return;
        }

        this.target.style.width = width + 'px';

        this.scaledWidth = scaledWidth;

        this.setState({ colgroups: colgroups });
      }
    }

    /**
     * 结束拖拽.
     *
     * @param  {Number} pageX
     * @return {Undefined}
     */

  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp(_ref5) {
      var pageX = _ref5.pageX;

      document.body.style.cursor = 'default';

      if (pageX === this.pageX) {
        this.stopScaleWidth(); // 如果位置一样，则表示是点击事件（排序）
      }

      (0, _jquery2.default)(document).off('mousemove', this.handleMouseMove);
      (0, _jquery2.default)(document).off('mouseup', this.handleMouseMove);
    }

    /**
     * 鼠标移出后还原鼠标样式.
     *
     * @param  {Object} options.target
     * @return {Undefined}
     */

  }, {
    key: 'handleMouseOut',
    value: function handleMouseOut(_ref6) {
      var target = _ref6.target;

      target.style.cursor = 'default';
    }

    /**
     * 结束拖拽.
     * 之所以将其封装成方法，是用于解决拖拽完成后又排序的问题，正常逻辑应该是只缩放不排序。
     *
     * @return {Undefined}
     */

  }, {
    key: 'stopScaleWidth',
    value: function stopScaleWidth() {
      this.target = null;
      this.dragged = false;
      this.pageX = null;
    }
  }, {
    key: 'isPercentWidth',
    value: function isPercentWidth(width) {
      return (/%$/.test(width)
      );
    }
  }, {
    key: 'renderColElement',
    value: function renderColElement(_ref7, index) {
      var key = _ref7.key,
          width = _ref7.width,
          scaleable = _ref7.scaleable;
      var colgroups = this.state.colgroups,
          scaledWidth = this.scaledWidth,
          isPrecent = this.isPercentWidth(width);


      if (_lodash2.default.isUndefined(width)) {
        width = colgroups[index];
      } else {
        if (isPrecent) {
          if (scaleable === true) {
            if (colgroups[index]) {
              width = colgroups[index] || 'auto';
            } else {
              colgroups[index] = width;
            }
          }
        } else {
          width = parseInt(width, 10);

          colgroups[index] = width;
          scaledWidth[index] = width;
        }
      }

      return _react2.default.createElement('col', {
        key: key,
        style: {
          width: normalizeWidth(width)
        }
      });
    }
  }, {
    key: 'renderError',
    value: function renderError() {}
  }, {
    key: 'render',
    value: function render() {
      var _this7 = this;

      this.ths = [];

      var _props = this.props,
          columns = _props.columns,
          showCols = _props.showCols,
          tbodyClassName = _props.tbodyClassName,
          className = _props.className;


      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('table-root', className), style: {
            minWidth: this.$width,
            minHeight: 10
          } },
        showCols ? _react2.default.createElement(
          'div',
          { className: 'table-header', ref: 'thead' },
          _react2.default.createElement(
            'table',
            { className: 'table table-fixed' },
            _react2.default.createElement(
              'colgroup',
              null,
              columns.map(this.renderColElement.bind(this))
            ),
            _react2.default.createElement(
              'thead',
              null,
              _react2.default.createElement(
                'tr',
                null,
                columns.map(function (col, colInd) {
                  var isLast = colInd === columns.length - 1,
                      events = null;

                  if (col.scaleable === true) {
                    events = {
                      onMouseDown: _this7.handleMouseDown.bind(_this7),
                      onMouseMove: _this7.handleThMouseMove.bind(_this7),
                      onMouseUp: _this7.handleMouseUp.bind(_this7),
                      onMouseOut: _this7.handleMouseOut.bind(_this7)
                    };
                  }

                  return _react2.default.createElement(
                    'th',
                    _extends({
                      ref: function ref(th) {
                        return th && _this7.ths.push(th);
                      },
                      key: col.key,
                      style: {
                        width: col.scaleable ? _this7.state.colgroups[colInd] : col.width
                      },
                      className: (0, _classnames2.default)({
                        'text-truncate': col.ellipsis,
                        'unselect': col.scaleable,
                        'relative': isLast && _this7.state.limit > 0
                      }),
                      onClick: col.sortable ? _this7.handleSort.bind(_this7, col.key) : col.sortfetch ? _this7.handleSortFetch.bind(_this7, col.key) : null
                    }, events),
                    _react2.default.createElement(
                      'div',
                      { className: (0, _classnames2.default)({
                          'sortable': col.sortable || col.sortfetch
                        }) },
                      _this7.getThContent(col, isLast)
                    )
                  );
                })
              )
            )
          )
        ) : null,
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)('table-body', tbodyClassName), ref: 'tbody' },
          _react2.default.createElement(
            'table',
            { className: 'table table-fixed table-striped table-hover', ref: 'table' },
            _react2.default.createElement(
              'colgroup',
              null,
              columns.map(this.renderColElement.bind(this))
            ),
            _react2.default.createElement(
              'tbody',
              null,
              this.props.error ? this.renderError() : this.state.data.length > 0 ? this.state.data.map(function (row, rowInd, rows) {
                return _this7.renderRow(row, rowInd, rows);
              }) : _react2.default.createElement(
                'tr',
                null,
                _react2.default.createElement(
                  'td',
                  { colSpan: columns.length },
                  _react2.default.createElement(_index2.default, null)
                )
              )
            )
          )
        )
      );
    }
  }]);

  return Table;
}(_react.Component), _class.defaultProps = {
  data: [],
  showCols: true,
  viewOptions: {
    helpers: {}
  },
  className: null,
  columns: [{
    key: 1,
    sortable: true,
    title: '数据列一',
    width: 20
  }, {
    key: 2,
    sortable: true,
    title: '数据列二',
    width: 20
  }, {
    key: 3,
    sortable: true,
    title: '数据列三',
    width: 20
  }],
  defaultSortKey: undefined,
  sortKey: null,
  filterFn: function filterFn(row) {
    return true;
  },
  isSelected: false,
  getSelections: function getSelections(v) {
    return v;
  },
  isRadio: true,
  selectedRows: [],
  sortFetchKey: null,
  getSortKey: function getSortKey(v) {
    return v;
  },
  tbodyClassName: null
}, _temp);
exports.default = Table;
module.exports = exports['default'];